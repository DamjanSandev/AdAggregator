import os
import json
import re
from typing import Dict, Any

from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

EXPECTED_KEYS = ["location", "features", "contact_number", "contact_name"]

EXAMPLE_JSON = json.dumps({
    "location": "–°–∫–æ–ø—ò–µ",
    "features": ["–≥–∞—Ä–∞–Ω—Ü–∏—ò–∞", "—Å–µ—Ä–≤–∏—Å–Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞"],
    "contact_number": "078546171",
    "contact_name": "–î–µ—ò–∞–Ω"
}, ensure_ascii=False, indent=2)

_JSON_RE = re.compile(r"\{.*\}", re.S)


def clean_description(text: str) -> str:
    text = re.sub(r"https?://\S+", "", text)
    text = re.sub(r"[^\w\s–ê-–®–∞-—à–Ä-”ø‚Ç¨.,:/-]", "", text)
    text = re.sub(r"\n{2,}", "\n", text)
    return text.strip()[:1000]


def build_prompt(description: str) -> str:
    return (
        "–ò–∑–≤–ª–µ—á–∏ –≥–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –æ–≥–ª–∞—Å–æ—Ç –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª –∏ –≤—Ä–∞—Ç–∏ –≥–∏ –∫–∞–∫–æ JSON.\n"
        "–ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞—ò –≥–∏ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏—Ç–µ –ø–æ –æ–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "- location: –∫–æ—Ä–∏—Å—Ç–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –ø—Ä–≤–∞ –±—É–∫–≤–∞ –≥–æ–ª–µ–º–∞ (–Ω–∞ –ø—Ä. –°–ö–û–ü–à–ï ‚Üí Skopje)\n"
        "- features: –≤—Ä–∞—Ç–∏ –∫–∞–∫–æ –ª–∏—Å—Ç–∞ –æ–¥ –º–∞–ª–∏ –±—É–∫–≤–∏ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞, –±–µ–∑ –¥—É–ø–ª–∏–∫–∞—Ç–∏\n"
        "- contact_number: —Å–∞–º–æ –¥–µ–≤–µ—Ç—Ü–∏—Ñ—Ä–µ–Ω –±—Ä–æ—ò (–Ω–∞ –ø—Ä. 070123456)\n"
        "- contact_name: –ø—Ä–≤–∞ –±—É–∫–≤–∞ –≥–æ–ª–µ–º–∞, –æ—Å—Ç–∞–Ω–∞—Ç–∏—Ç–µ –º–∞–ª–∏ –∏ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–∞\n\n"
        "üìå –ê–∫–æ –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–æ–Ω–∞—ò–¥–µ –Ω–µ–∫–æ–µ –ø–æ–ª–µ, –≤—Ä–∞—Ç–∏ `null`.\n"
        "---\n"
        "–û–ø–∏—Å:\n"
        "–°–µ –ø—Ä–æ–¥–∞–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª, —Å–µ –Ω–∞–æ—ì–∞ –≤–æ –°–ö–û–ü–à–ï. –ò–º–∞ —Å–µ—Ä–≤–∏—Å–Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞ –∏ –Ω–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ü–∏—ò–∞. "
        "–°–æ–ø—Å—Ç–≤–µ–Ω–∏–∫ –à–æ–≤–∞–Ω, —Ç–µ–ª: +389 70 123 456.\n"
        "---\n"
        "JSON:\n"
        "{\n"
        '  "location": "Skopje",\n'
        '  "features": ["—Å–µ—Ä–≤–∏—Å–Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞", "–≥–∞—Ä–∞–Ω—Ü–∏—ò–∞"],\n'
        '  "contact_number": "070123456",\n'
        '  "contact_name": "Jovan"\n'
        "}\n\n"
        f"–û–ø–∏—Å –Ω–∞ –æ–≥–ª–∞—Å–æ—Ç:\n{description}\n\n"
        "JSON:"
    )


def _safe_json(response_text: str) -> Dict[str, Any]:
    match = _JSON_RE.search(response_text)
    if not match:
        return {"error": "no-json", "raw_output": response_text}
    try:
        return json.loads(match.group(0))
    except json.JSONDecodeError:
        return {"error": "bad-json", "raw_output": response_text}


def _normalize(data: Dict[str, Any]) -> Dict[str, Any]:
    return {key: data.get(key) for key in EXPECTED_KEYS}


def extract_features(description: str) -> Dict[str, Any]:
    cleaned_desc = clean_description(description)
    prompt = build_prompt(cleaned_desc)

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢–∏ —Å–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—ò –≤–∞–¥–∏ JSON –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –º–∞–∫–µ–¥–æ–Ω—Å–∫–∏ —ò–∞–∑–∏–∫."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0,
            max_tokens=512
        )

        reply = response.choices[0].message.content
        print("[üß† GPT reply]", reply)
        parsed = _safe_json(reply)
        if "error" in parsed:
            return {**_normalize({}), **parsed}
        return _normalize(parsed)

    except Exception as e:
        return {"error": "openai-error", "message": str(e), **_normalize({})}
